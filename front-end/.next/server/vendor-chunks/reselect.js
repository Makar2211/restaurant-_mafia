"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/reselect";
exports.ids = ["vendor-chunks/reselect"];
exports.modules = {

/***/ "(ssr)/./node_modules/reselect/lib/defaultMemoize.js":
/*!*****************************************************!*\
  !*** ./node_modules/reselect/lib/defaultMemoize.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n\r\nObject.defineProperty(exports, \"__esModule\", ({\r\n  value: true\r\n}));\r\nexports.createCacheKeyComparator = createCacheKeyComparator;\r\nexports.defaultEqualityCheck = void 0;\r\nexports.defaultMemoize = defaultMemoize;\r\n// Cache implementation based on Erik Rasmussen's `lru-memoize`:\r\n// https://github.com/erikras/lru-memoize\r\nvar NOT_FOUND = 'NOT_FOUND';\r\n\r\nfunction createSingletonCache(equals) {\r\n  var entry;\r\n  return {\r\n    get: function get(key) {\r\n      if (entry && equals(entry.key, key)) {\r\n        return entry.value;\r\n      }\r\n\r\n      return NOT_FOUND;\r\n    },\r\n    put: function put(key, value) {\r\n      entry = {\r\n        key: key,\r\n        value: value\r\n      };\r\n    },\r\n    getEntries: function getEntries() {\r\n      return entry ? [entry] : [];\r\n    },\r\n    clear: function clear() {\r\n      entry = undefined;\r\n    }\r\n  };\r\n}\r\n\r\nfunction createLruCache(maxSize, equals) {\r\n  var entries = [];\r\n\r\n  function get(key) {\r\n    var cacheIndex = entries.findIndex(function (entry) {\r\n      return equals(key, entry.key);\r\n    }); // We found a cached entry\r\n\r\n    if (cacheIndex > -1) {\r\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\r\n\r\n      if (cacheIndex > 0) {\r\n        entries.splice(cacheIndex, 1);\r\n        entries.unshift(entry);\r\n      }\r\n\r\n      return entry.value;\r\n    } // No entry found in cache, return sentinel\r\n\r\n\r\n    return NOT_FOUND;\r\n  }\r\n\r\n  function put(key, value) {\r\n    if (get(key) === NOT_FOUND) {\r\n      // TODO Is unshift slow?\r\n      entries.unshift({\r\n        key: key,\r\n        value: value\r\n      });\r\n\r\n      if (entries.length > maxSize) {\r\n        entries.pop();\r\n      }\r\n    }\r\n  }\r\n\r\n  function getEntries() {\r\n    return entries;\r\n  }\r\n\r\n  function clear() {\r\n    entries = [];\r\n  }\r\n\r\n  return {\r\n    get: get,\r\n    put: put,\r\n    getEntries: getEntries,\r\n    clear: clear\r\n  };\r\n}\r\n\r\nvar defaultEqualityCheck = function defaultEqualityCheck(a, b) {\r\n  return a === b;\r\n};\r\n\r\nexports.defaultEqualityCheck = defaultEqualityCheck;\r\n\r\nfunction createCacheKeyComparator(equalityCheck) {\r\n  return function areArgumentsShallowlyEqual(prev, next) {\r\n    if (prev === null || next === null || prev.length !== next.length) {\r\n      return false;\r\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\r\n\r\n\r\n    var length = prev.length;\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      if (!equalityCheck(prev[i], next[i])) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  };\r\n}\r\n\r\n// defaultMemoize now supports a configurable cache size with LRU behavior,\r\n// and optional comparison of the result value with existing values\r\nfunction defaultMemoize(func, equalityCheckOrOptions) {\r\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\r\n    equalityCheck: equalityCheckOrOptions\r\n  };\r\n  var _providedOptions$equa = providedOptions.equalityCheck,\r\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\r\n      _providedOptions$maxS = providedOptions.maxSize,\r\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\r\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\r\n  var comparator = createCacheKeyComparator(equalityCheck);\r\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\r\n\r\n  function memoized() {\r\n    var value = cache.get(arguments);\r\n\r\n    if (value === NOT_FOUND) {\r\n      // @ts-ignore\r\n      value = func.apply(null, arguments);\r\n\r\n      if (resultEqualityCheck) {\r\n        var entries = cache.getEntries();\r\n        var matchingEntry = entries.find(function (entry) {\r\n          return resultEqualityCheck(entry.value, value);\r\n        });\r\n\r\n        if (matchingEntry) {\r\n          value = matchingEntry.value;\r\n        }\r\n      }\r\n\r\n      cache.put(arguments, value);\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  memoized.clearCache = function () {\r\n    return cache.clear();\r\n  };\r\n\r\n  return memoized;\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVzZWxlY3QvbGliL2RlZmF1bHRNZW1vaXplLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixnQ0FBZ0M7QUFDaEMsNEJBQTRCO0FBQzVCLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxHQUFHO0FBQ1I7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFlBQVk7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0dBQXNHO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udC1lbmQvLi9ub2RlX21vZHVsZXMvcmVzZWxlY3QvbGliL2RlZmF1bHRNZW1vaXplLmpzPzBhZDciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcclxuICB2YWx1ZTogdHJ1ZVxyXG59KTtcclxuZXhwb3J0cy5jcmVhdGVDYWNoZUtleUNvbXBhcmF0b3IgPSBjcmVhdGVDYWNoZUtleUNvbXBhcmF0b3I7XHJcbmV4cG9ydHMuZGVmYXVsdEVxdWFsaXR5Q2hlY2sgPSB2b2lkIDA7XHJcbmV4cG9ydHMuZGVmYXVsdE1lbW9pemUgPSBkZWZhdWx0TWVtb2l6ZTtcclxuLy8gQ2FjaGUgaW1wbGVtZW50YXRpb24gYmFzZWQgb24gRXJpayBSYXNtdXNzZW4ncyBgbHJ1LW1lbW9pemVgOlxyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZXJpa3Jhcy9scnUtbWVtb2l6ZVxyXG52YXIgTk9UX0ZPVU5EID0gJ05PVF9GT1VORCc7XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVTaW5nbGV0b25DYWNoZShlcXVhbHMpIHtcclxuICB2YXIgZW50cnk7XHJcbiAgcmV0dXJuIHtcclxuICAgIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xyXG4gICAgICBpZiAoZW50cnkgJiYgZXF1YWxzKGVudHJ5LmtleSwga2V5KSkge1xyXG4gICAgICAgIHJldHVybiBlbnRyeS52YWx1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIE5PVF9GT1VORDtcclxuICAgIH0sXHJcbiAgICBwdXQ6IGZ1bmN0aW9uIHB1dChrZXksIHZhbHVlKSB7XHJcbiAgICAgIGVudHJ5ID0ge1xyXG4gICAgICAgIGtleToga2V5LFxyXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxyXG4gICAgICB9O1xyXG4gICAgfSxcclxuICAgIGdldEVudHJpZXM6IGZ1bmN0aW9uIGdldEVudHJpZXMoKSB7XHJcbiAgICAgIHJldHVybiBlbnRyeSA/IFtlbnRyeV0gOiBbXTtcclxuICAgIH0sXHJcbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XHJcbiAgICAgIGVudHJ5ID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUxydUNhY2hlKG1heFNpemUsIGVxdWFscykge1xyXG4gIHZhciBlbnRyaWVzID0gW107XHJcblxyXG4gIGZ1bmN0aW9uIGdldChrZXkpIHtcclxuICAgIHZhciBjYWNoZUluZGV4ID0gZW50cmllcy5maW5kSW5kZXgoZnVuY3Rpb24gKGVudHJ5KSB7XHJcbiAgICAgIHJldHVybiBlcXVhbHMoa2V5LCBlbnRyeS5rZXkpO1xyXG4gICAgfSk7IC8vIFdlIGZvdW5kIGEgY2FjaGVkIGVudHJ5XHJcblxyXG4gICAgaWYgKGNhY2hlSW5kZXggPiAtMSkge1xyXG4gICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2NhY2hlSW5kZXhdOyAvLyBDYWNoZWQgZW50cnkgbm90IGF0IHRvcCBvZiBjYWNoZSwgbW92ZSBpdCB0byB0aGUgdG9wXHJcblxyXG4gICAgICBpZiAoY2FjaGVJbmRleCA+IDApIHtcclxuICAgICAgICBlbnRyaWVzLnNwbGljZShjYWNoZUluZGV4LCAxKTtcclxuICAgICAgICBlbnRyaWVzLnVuc2hpZnQoZW50cnkpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gZW50cnkudmFsdWU7XHJcbiAgICB9IC8vIE5vIGVudHJ5IGZvdW5kIGluIGNhY2hlLCByZXR1cm4gc2VudGluZWxcclxuXHJcblxyXG4gICAgcmV0dXJuIE5PVF9GT1VORDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHB1dChrZXksIHZhbHVlKSB7XHJcbiAgICBpZiAoZ2V0KGtleSkgPT09IE5PVF9GT1VORCkge1xyXG4gICAgICAvLyBUT0RPIElzIHVuc2hpZnQgc2xvdz9cclxuICAgICAgZW50cmllcy51bnNoaWZ0KHtcclxuICAgICAgICBrZXk6IGtleSxcclxuICAgICAgICB2YWx1ZTogdmFsdWVcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZiAoZW50cmllcy5sZW5ndGggPiBtYXhTaXplKSB7XHJcbiAgICAgICAgZW50cmllcy5wb3AoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZ2V0RW50cmllcygpIHtcclxuICAgIHJldHVybiBlbnRyaWVzO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2xlYXIoKSB7XHJcbiAgICBlbnRyaWVzID0gW107XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgZ2V0OiBnZXQsXHJcbiAgICBwdXQ6IHB1dCxcclxuICAgIGdldEVudHJpZXM6IGdldEVudHJpZXMsXHJcbiAgICBjbGVhcjogY2xlYXJcclxuICB9O1xyXG59XHJcblxyXG52YXIgZGVmYXVsdEVxdWFsaXR5Q2hlY2sgPSBmdW5jdGlvbiBkZWZhdWx0RXF1YWxpdHlDaGVjayhhLCBiKSB7XHJcbiAgcmV0dXJuIGEgPT09IGI7XHJcbn07XHJcblxyXG5leHBvcnRzLmRlZmF1bHRFcXVhbGl0eUNoZWNrID0gZGVmYXVsdEVxdWFsaXR5Q2hlY2s7XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVDYWNoZUtleUNvbXBhcmF0b3IoZXF1YWxpdHlDaGVjaykge1xyXG4gIHJldHVybiBmdW5jdGlvbiBhcmVBcmd1bWVudHNTaGFsbG93bHlFcXVhbChwcmV2LCBuZXh0KSB7XHJcbiAgICBpZiAocHJldiA9PT0gbnVsbCB8fCBuZXh0ID09PSBudWxsIHx8IHByZXYubGVuZ3RoICE9PSBuZXh0Lmxlbmd0aCkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9IC8vIERvIHRoaXMgaW4gYSBmb3IgbG9vcCAoYW5kIG5vdCBhIGBmb3JFYWNoYCBvciBhbiBgZXZlcnlgKSBzbyB3ZSBjYW4gZGV0ZXJtaW5lIGVxdWFsaXR5IGFzIGZhc3QgYXMgcG9zc2libGUuXHJcblxyXG5cclxuICAgIHZhciBsZW5ndGggPSBwcmV2Lmxlbmd0aDtcclxuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmICghZXF1YWxpdHlDaGVjayhwcmV2W2ldLCBuZXh0W2ldKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH07XHJcbn1cclxuXHJcbi8vIGRlZmF1bHRNZW1vaXplIG5vdyBzdXBwb3J0cyBhIGNvbmZpZ3VyYWJsZSBjYWNoZSBzaXplIHdpdGggTFJVIGJlaGF2aW9yLFxyXG4vLyBhbmQgb3B0aW9uYWwgY29tcGFyaXNvbiBvZiB0aGUgcmVzdWx0IHZhbHVlIHdpdGggZXhpc3RpbmcgdmFsdWVzXHJcbmZ1bmN0aW9uIGRlZmF1bHRNZW1vaXplKGZ1bmMsIGVxdWFsaXR5Q2hlY2tPck9wdGlvbnMpIHtcclxuICB2YXIgcHJvdmlkZWRPcHRpb25zID0gdHlwZW9mIGVxdWFsaXR5Q2hlY2tPck9wdGlvbnMgPT09ICdvYmplY3QnID8gZXF1YWxpdHlDaGVja09yT3B0aW9ucyA6IHtcclxuICAgIGVxdWFsaXR5Q2hlY2s6IGVxdWFsaXR5Q2hlY2tPck9wdGlvbnNcclxuICB9O1xyXG4gIHZhciBfcHJvdmlkZWRPcHRpb25zJGVxdWEgPSBwcm92aWRlZE9wdGlvbnMuZXF1YWxpdHlDaGVjayxcclxuICAgICAgZXF1YWxpdHlDaGVjayA9IF9wcm92aWRlZE9wdGlvbnMkZXF1YSA9PT0gdm9pZCAwID8gZGVmYXVsdEVxdWFsaXR5Q2hlY2sgOiBfcHJvdmlkZWRPcHRpb25zJGVxdWEsXHJcbiAgICAgIF9wcm92aWRlZE9wdGlvbnMkbWF4UyA9IHByb3ZpZGVkT3B0aW9ucy5tYXhTaXplLFxyXG4gICAgICBtYXhTaXplID0gX3Byb3ZpZGVkT3B0aW9ucyRtYXhTID09PSB2b2lkIDAgPyAxIDogX3Byb3ZpZGVkT3B0aW9ucyRtYXhTLFxyXG4gICAgICByZXN1bHRFcXVhbGl0eUNoZWNrID0gcHJvdmlkZWRPcHRpb25zLnJlc3VsdEVxdWFsaXR5Q2hlY2s7XHJcbiAgdmFyIGNvbXBhcmF0b3IgPSBjcmVhdGVDYWNoZUtleUNvbXBhcmF0b3IoZXF1YWxpdHlDaGVjayk7XHJcbiAgdmFyIGNhY2hlID0gbWF4U2l6ZSA9PT0gMSA/IGNyZWF0ZVNpbmdsZXRvbkNhY2hlKGNvbXBhcmF0b3IpIDogY3JlYXRlTHJ1Q2FjaGUobWF4U2l6ZSwgY29tcGFyYXRvcik7IC8vIHdlIHJlZmVyZW5jZSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgdGhlbSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xyXG5cclxuICBmdW5jdGlvbiBtZW1vaXplZCgpIHtcclxuICAgIHZhciB2YWx1ZSA9IGNhY2hlLmdldChhcmd1bWVudHMpO1xyXG5cclxuICAgIGlmICh2YWx1ZSA9PT0gTk9UX0ZPVU5EKSB7XHJcbiAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgdmFsdWUgPSBmdW5jLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XHJcblxyXG4gICAgICBpZiAocmVzdWx0RXF1YWxpdHlDaGVjaykge1xyXG4gICAgICAgIHZhciBlbnRyaWVzID0gY2FjaGUuZ2V0RW50cmllcygpO1xyXG4gICAgICAgIHZhciBtYXRjaGluZ0VudHJ5ID0gZW50cmllcy5maW5kKGZ1bmN0aW9uIChlbnRyeSkge1xyXG4gICAgICAgICAgcmV0dXJuIHJlc3VsdEVxdWFsaXR5Q2hlY2soZW50cnkudmFsdWUsIHZhbHVlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKG1hdGNoaW5nRW50cnkpIHtcclxuICAgICAgICAgIHZhbHVlID0gbWF0Y2hpbmdFbnRyeS52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNhY2hlLnB1dChhcmd1bWVudHMsIHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbiAgfVxyXG5cclxuICBtZW1vaXplZC5jbGVhckNhY2hlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIGNhY2hlLmNsZWFyKCk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIG1lbW9pemVkO1xyXG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/reselect/lib/defaultMemoize.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/reselect/lib/index.js":
/*!********************************************!*\
  !*** ./node_modules/reselect/lib/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n\r\nObject.defineProperty(exports, \"__esModule\", ({\r\n  value: true\r\n}));\r\nexports.createSelector = void 0;\r\nexports.createSelectorCreator = createSelectorCreator;\r\nexports.createStructuredSelector = void 0;\r\nObject.defineProperty(exports, \"defaultEqualityCheck\", ({\r\n  enumerable: true,\r\n  get: function get() {\r\n    return _defaultMemoize.defaultEqualityCheck;\r\n  }\r\n}));\r\nObject.defineProperty(exports, \"defaultMemoize\", ({\r\n  enumerable: true,\r\n  get: function get() {\r\n    return _defaultMemoize.defaultMemoize;\r\n  }\r\n}));\r\n\r\nvar _defaultMemoize = __webpack_require__(/*! ./defaultMemoize */ \"(ssr)/./node_modules/reselect/lib/defaultMemoize.js\");\r\n\r\nfunction getDependencies(funcs) {\r\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\r\n\r\n  if (!dependencies.every(function (dep) {\r\n    return typeof dep === 'function';\r\n  })) {\r\n    var dependencyTypes = dependencies.map(function (dep) {\r\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\r\n    }).join(', ');\r\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\r\n  }\r\n\r\n  return dependencies;\r\n}\r\n\r\nfunction createSelectorCreator(memoize) {\r\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\r\n  }\r\n\r\n  var createSelector = function createSelector() {\r\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\r\n      funcs[_key2] = arguments[_key2];\r\n    }\r\n\r\n    var _recomputations = 0;\r\n\r\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\r\n    // So, start by declaring the default value here.\r\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\r\n\r\n\r\n    var directlyPassedOptions = {\r\n      memoizeOptions: undefined\r\n    }; // Normally, the result func or \"output selector\" is the last arg\r\n\r\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\r\n\r\n    if (typeof resultFunc === 'object') {\r\n      directlyPassedOptions = resultFunc; // and pop the real result func off\r\n\r\n      resultFunc = funcs.pop();\r\n    }\r\n\r\n    if (typeof resultFunc !== 'function') {\r\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\r\n    } // Determine which set of options we're using. Prefer options passed directly,\r\n    // but fall back to options given to createSelectorCreator.\r\n\r\n\r\n    var _directlyPassedOption = directlyPassedOptions,\r\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\r\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\r\n    // is an array. In most libs I've looked at, it's an equality function or options object.\r\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\r\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\r\n    // we wrap it in an array so we can apply it.\r\n\r\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\r\n    var dependencies = getDependencies(funcs);\r\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\r\n      _recomputations++; // apply arguments instead of spreading for performance.\r\n\r\n      return resultFunc.apply(null, arguments);\r\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\r\n\r\n    var selector = memoize(function dependenciesChecker() {\r\n      var params = [];\r\n      var length = dependencies.length;\r\n\r\n      for (var i = 0; i < length; i++) {\r\n        // apply arguments instead of spreading and mutate a local list of params for performance.\r\n        // @ts-ignore\r\n        params.push(dependencies[i].apply(null, arguments));\r\n      } // apply arguments instead of spreading for performance.\r\n\r\n\r\n      _lastResult = memoizedResultFunc.apply(null, params);\r\n      return _lastResult;\r\n    });\r\n    Object.assign(selector, {\r\n      resultFunc: resultFunc,\r\n      memoizedResultFunc: memoizedResultFunc,\r\n      dependencies: dependencies,\r\n      lastResult: function lastResult() {\r\n        return _lastResult;\r\n      },\r\n      recomputations: function recomputations() {\r\n        return _recomputations;\r\n      },\r\n      resetRecomputations: function resetRecomputations() {\r\n        return _recomputations = 0;\r\n      }\r\n    });\r\n    return selector;\r\n  }; // @ts-ignore\r\n\r\n\r\n  return createSelector;\r\n}\r\n\r\nvar createSelector = /* #__PURE__ */createSelectorCreator(_defaultMemoize.defaultMemoize);\r\nexports.createSelector = createSelector;\r\n\r\n// Manual definition of state and output arguments\r\nvar createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\r\n  if (selectorCreator === void 0) {\r\n    selectorCreator = createSelector;\r\n  }\r\n\r\n  if (typeof selectors !== 'object') {\r\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\r\n  }\r\n\r\n  var objectKeys = Object.keys(selectors);\r\n  var resultSelector = selectorCreator( // @ts-ignore\r\n  objectKeys.map(function (key) {\r\n    return selectors[key];\r\n  }), function () {\r\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\r\n      values[_key3] = arguments[_key3];\r\n    }\r\n\r\n    return values.reduce(function (composition, value, index) {\r\n      composition[objectKeys[index]] = value;\r\n      return composition;\r\n    }, {});\r\n  });\r\n  return resultSelector;\r\n};\r\n\r\nexports.createStructuredSelector = createStructuredSelector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/reselect/lib/index.js\n");

/***/ })

};
;